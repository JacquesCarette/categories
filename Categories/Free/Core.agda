{-# OPTIONS --universe-polymorphism #-}

-- Free category generated by a directed graph.
-- The graph is given by a type (Obj) of nodes and a (Obj × Obj)-indexed
-- Setoid of (directed) edges.  Every inhabitant of the node type is 
-- considered to be a (distinct) node of the graph, and (equivalence 
-- classes of) inhabitants of the edge type (for a given pair of 
-- nodes) are considered edges of the graph.  
module Categories.Free.Core where

open import Categories.Category
open import Categories.Functor
  using (Functor)
open import Categories.Support.Equivalence
open import Categories.Support.PropositionalEquality
open import Graphs.Quiver hiding (_[_,_])
open import Graphs.Quiver.Morphism
open import Relation.Binary
  using (module IsEquivalence)
open import Relation.Binary.PropositionalEquality
  using ()
  renaming (_≡_ to _≣_; refl to ≣-refl)
open import Data.Star
open import Data.Star.Properties
  using (gmap-◅◅; ◅◅-assoc)
open import Level using (_⊔_)

Free₀ : ∀ {o a} → Quiver o a → Category o (o ⊔ a)
Free₀ {o}{a} G = record
  { Obj       = Obj
  ; _⇒_       = Star _⇒_
  ; id        = ε
  ; _∘_       = _▻▻_
  ; ASSOC     = λ f g h → ≣-sym (◅◅-assoc f g h)
  ; IDENTITYˡ = λ f → f◅◅ε≣f
  ; IDENTITYʳ = λ _ → ≣-refl
  }
  where
    open Quiver G
    
    f◅◅ε≣f : ∀ {A B}{f : Star _⇒_ A B} -> (f ◅◅ ε) ≣ f
    f◅◅ε≣f {f = ε} = ≣-refl
    f◅◅ε≣f {f = x ◅ xs} rewrite f◅◅ε≣f {f = xs}  = ≣-refl

Free₁ : ∀ {o₁ a₁ o₂ a₂}
  {A : Quiver o₁ a₁}
  {B : Quiver o₂ a₂}
  → QuiverMorphism A B → Functor (Free₀ A) (Free₀ B)
Free₁ {o₁}{a₁}{o₂}{a₂}{A}{B} G = record
  { F₀            = G₀
  ; F₁            = gmap G₀ G₁
  ; identity      = refl
  ; homomorphism  = λ {X}{Y}{Z}{f}{g} → homomorphism {X}{Y}{Z}{f}{g}
  }
  where
    open QuiverMorphism G
      renaming (F₀ to G₀; F₁ to G₁; F-resp-≈ to G-resp-≈)
    open Category.Equiv (Free₀ B)
    
    .homomorphism : ∀ {X Y Z}
      {f : Free₀ A [ X , Y ]}
      {g : Free₀ A [ Y , Z ]}
      → Free₀ B [ gmap G₀ G₁ (f ◅◅ g) ≡ gmap G₀ G₁ f ◅◅ gmap G₀ G₁ g ]
    homomorphism {f = f}{g} = reflexive (gmap-◅◅ G₀ G₁ f g)
